// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortfolioExample.Models;

namespace PortfolioExample.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20201217001937_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("PortfolioExample.Models.Action", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("PortfolioExample.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("PortfolioExample.Models.Measurement", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int?>("MeasurementTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementTypeId");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("PortfolioExample.Models.MeasurementForStep", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("MeasurementId")
                        .HasColumnType("int");

                    b.Property<int?>("StepId")
                        .HasColumnType("int")
                        .HasColumnName("StepID");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("StepId");

                    b.ToTable("MeasurementForStep");
                });

            modelBuilder.Entity("PortfolioExample.Models.MeasurementType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("UnitOfMeasure")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("MeasurementTypes");
                });

            modelBuilder.Entity("PortfolioExample.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("PortfolioExample.Models.Step", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberInList")
                        .HasColumnType("int");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("PortfolioExample.Models.Measurement", b =>
                {
                    b.HasOne("PortfolioExample.Models.MeasurementType", "MeasurementType")
                        .WithMany("Measurements")
                        .HasForeignKey("MeasurementTypeId")
                        .HasConstraintName("FK__Measureme__Measu__31EC6D26");

                    b.Navigation("MeasurementType");
                });

            modelBuilder.Entity("PortfolioExample.Models.MeasurementForStep", b =>
                {
                    b.HasOne("PortfolioExample.Models.Measurement", "Measurement")
                        .WithMany("MeasurementForSteps")
                        .HasForeignKey("MeasurementId")
                        .HasConstraintName("FK__Measureme__Measu__30F848ED");

                    b.HasOne("PortfolioExample.Models.Step", "Step")
                        .WithMany("MeasurementForSteps")
                        .HasForeignKey("StepId")
                        .HasConstraintName("FK__Measureme__StepI__300424B4");

                    b.Navigation("Measurement");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("PortfolioExample.Models.Step", b =>
                {
                    b.HasOne("PortfolioExample.Models.Action", "Action")
                        .WithMany("Steps")
                        .HasForeignKey("ActionId")
                        .HasConstraintName("FK__Steps__ActionId__33D4B598");

                    b.HasOne("PortfolioExample.Models.Recipe", "Recipe")
                        .WithMany("Steps")
                        .HasForeignKey("RecipeId")
                        .HasConstraintName("FK__Steps__RecipeId__32E0915F");

                    b.Navigation("Action");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("PortfolioExample.Models.Action", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("PortfolioExample.Models.Measurement", b =>
                {
                    b.Navigation("MeasurementForSteps");
                });

            modelBuilder.Entity("PortfolioExample.Models.MeasurementType", b =>
                {
                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("PortfolioExample.Models.Recipe", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("PortfolioExample.Models.Step", b =>
                {
                    b.Navigation("MeasurementForSteps");
                });
#pragma warning restore 612, 618
        }
    }
}
